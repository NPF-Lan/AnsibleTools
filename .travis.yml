# This is a weird way of telling Travis to use the fast container-based test
# runner instead of the slow VM-based runner.
sudo: false

language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any older versions be considered deprecated. Don't bother testing
# with them.
go:
  - 1.x

# Only clone the most recent commit.
git:
  depth: 1

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install: true

# Don't email me the results of the test runs.
notifications:
  email: false

before_script:
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  - chmod +x $GOPATH/bin/dep
  - curl -Ls https://github.com/golangci/golangci-lint/releases/download/v1.4.1/golangci-lint-1.4.1-linux-amd64.tar.gz -o/tmp/golangci-lint.tar.gz
  - tar zxvf /tmp/golangci-lint.tar.gz -C /tmp golangci-lint-1.4.1-linux-amd64/golangci-lint
  - chmod +x /tmp/golangci-lint-1.4.1-linux-amd64/golangci-lint
  - |
    for a in `ls src/`; do
      cd src/$a && $GOPATH/bin/dep ensure;
      tree .
      cd ../..;
    done



# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
  - |
    for a in `ls src`; do
      echo $a;
      cd src/$a;
      /tmp/golangci-lint-1.4.1-linux-amd64/golangci-lint run;       # run a bunch of code checkers/linters in parallel
      go test -v -race ./...;  # Run all the tests with the race detector enabled
      go build;
      cd ../..;
    done


#before_deploy:
#  # Set up git user name and tag this commit
#  - git config --local user.name "YOUR GIT USER NAME"
#  - git config --local user.email "YOUR GIT USER EMAIL"
#  - git tag "$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)"
#deploy:
#  provider: releases
#  api_key: "GITHUB OAUTH TOKEN"
#  file: "FILE TO UPLOAD"
#  skip_cleanup: true